# -*- coding: utf-8 -*-
"""stock-predictor-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11eKlvZ_QgYIK-q7I2H_dUl2PykFiisZa
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import sklearn

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
import tensorflow as tf
import keras
from sklearn.impute import SimpleImputer
from sklearn.metrics import r2_score

data = pd.read_csv('csv.csv', date_parser = True)
data_training = data[data['Date']<'2019-01-01'].copy()
data_test = data[data['Date']>='2019-01-01'].copy()
data_training = data_training.drop(['Date'], axis = 1)
data_training.shape

imputer = SimpleImputer()
train_data = imputer.fit_transform(data_training)
scaler = MinMaxScaler()
train_data = scaler.fit_transform(train_data)

# data_test = imputer.transform(data_test)
# data_test = scaler.transform(data_test)

train_data.shape

X_train = []
y_train = []

for i in range(60, train_data.shape[0]):
    X_train.append(train_data[i-60:i])
    y_train.append(train_data[i, 0])
    
X_train, y_train = np.array(X_train), np.array(y_train)
X_train.shape

regressor = Sequential()

regressor.add(LSTM(units = 60, activation = 'relu', return_sequences = True, input_shape = (X_train.shape[1], 6)))
regressor.add(Dropout(0.1))

regressor.add(LSTM(units = 60, activation = 'relu', return_sequences = True))
regressor.add(Dropout(0.1))

regressor.add(LSTM(units = 80, activation = 'relu', return_sequences = True))
regressor.add(Dropout(0.1))

regressor.add(LSTM(units = 100, activation = 'relu', return_sequences = True))
regressor.add(Dropout(0.1))

regressor.add(LSTM(units = 120, activation = 'relu'))
regressor.add(Dropout(0.1))

regressor.add(Dense(units = 1, kernel_regularizer=keras.regularizers.l2(l=0.1)))

regressor.summary()

opt = keras.optimizers.Adam(learning_rate=0.001)
regressor.compile(optimizer=opt, loss = 'mse')
regressor.fit(X_train, y_train, epochs=10, batch_size=128)

past_120_days = data_training.tail(120)
df = past_120_days.append(data_test, ignore_index = True)
df = df.drop(['Date'], axis = 1)
df

inputs = scaler.transform(df)
inputs

X_test = []
y_test = []

for i in range(60, inputs.shape[0]):
    X_test.append(inputs[i-60:i])
    y_test.append(inputs[i, 0])

X_test, y_test = np.array(X_test), np.array(y_test)
# print(X_test)
X_test

y_pred = regressor.predict(X_test)

scaler.scale_

scale = 1/2.02051056e-02
scale

y_pred = y_pred*scale
y_test = y_test*scale
y_pred = y_pred[~np.isnan(y_pred)]
y_test = y_test[~np.isnan(y_test)]
# y_test, y_pred.shape
# X_test = X_test[np.logical_not(np.isnan(X_test))]
percent = tf.keras.activations.sigmoid(y_pred)
conf_score = 100 - (np.mean(np.array(y_pred/y_test[:920])))
conf_score

plt.figure(figsize=(14,5))
plt.plot(y_test, color = 'red', label = 'Real Stock Price')
plt.plot(y_pred, color = 'blue', label = 'Predicted Stock Price')
plt.legend()
plt.show()

# conf = r2_score(y_test[:873], y_pred)
# conf_score = conf*100
# conf_score

